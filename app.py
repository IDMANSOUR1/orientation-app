import streamlit as st
import os
from openai import OpenAI
import json

st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

if "etape" not in st.session_state:
    st.session_state["etape"] = "bloc1"

# === Bloc 1 ===
if st.session_state["etape"] == "bloc1":
    st.header("üß† Bloc 1 : Situations g√©n√©rales")
    prenom = st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

    questions_bloc1 = {
        "Q1": ("Tu dois faire un expos√©. Tu :", [
            "Organises tes id√©es en plan",
            "Commences par √©crire",
            "Dessines une carte mentale"
        ]),
        "Q2": ("Un ami bloque sur un exercice. Tu :", [
            "R√©explique la m√©thode",
            "Reformules avec tes mots",
            "Inventes une m√©taphore"
        ]),
        "Q3": ("Tu pr√©f√®res :", [
            "Correction structur√©e",
            "Explication orale",
            "M√©thodes compar√©es"
        ]),
        "Q4": ("Tu choisis :", [
            "Probl√®me √† solution unique",
            "R√©daction libre",
            "Projet cr√©atif"
        ]),
        "Q5": ("Face √† une question difficile, tu :", [
            "Tentes ta chance",
            "Attends d‚Äô√™tre s√ªr",
            "Notes pour plus tard"
        ]),
        "Q6": ("On dit : 'm√©thode originale mais lente'. Tu :", [
            "Cherches logique",
            "Es fier(e)",
            "T'interroges sur ton style"
        ]),
        "Q7": ("Au CDI, tu :", [
            "Cherches un tuto",
            "Lis un blog ou vid√©o d‚Äôanalyse",
            "Cr√©es un projet"
        ]),
        "Q8": ("Tu es m√©thodique ?", [
            "Oui, j‚Äôaime structurer",
            "Non, id√©es spontan√©es",
            "Les deux selon les cas"
        ]),
        "Q9": ("Sujet difficile. Tu :", [
            "Fais un exercice",
            "Relis ton cours",
            "Discutes avec quelqu‚Äôun"
        ]),
        "Q10": ("Atelier libre. Tu choisis :", [
            "Construire une maquette",
            "√âcrire une histoire",
            "R√©soudre des √©nigmes"
        ]),
        "Q11": ("Corriger un devoir. Tu regardes :", [
            "Le raisonnement",
            "La qualit√© d‚Äô√©criture",
            "L‚Äôoriginalit√©"
        ]),
        "Q12": ("En expos√©, tu pr√©f√®res :", [
            "Rechercher et organiser",
            "√âcrire ou pr√©senter",
            "Cr√©er le support"
        ]),
        "Q13": ("Consigne floue. Tu :", [
            "Demande plus de d√©tails",
            "Proposes une id√©e originale",
            "Improvises"
        ]),
        "Q14": ("D√©bat. Tu observes :", [
            "Les arguments",
            "La clart√©",
            "La surprise"
        ]),
        "Q15": ("Pour r√©sumer un texte :", [
            "Id√©es principales",
            "Tes mots",
            "Carte mentale"
        ])
    }

    reponses_bloc1 = {}
    for key, (question, options) in questions_bloc1.items():
        choix = st.radio(question, options, key=key)
        if choix:
            reponses_bloc1[key] = choix

    if st.button("‚û°Ô∏è Suivant"):
        if len(reponses_bloc1) < len(questions_bloc1) or not prenom.strip():
            st.warning("Merci de r√©pondre √† toutes les questions et d‚Äôentrer ton pr√©nom.")
        else:
            with st.spinner("Analyse du profil..."):
                try:
                    prompt = f"Voici les r√©ponses d‚Äôun √©l√®ve marocain. D√©duis son profil dominant : scientifique, litt√©raire ou mixte. Pr√©nom : {prenom.strip()}\n"
                    for q, r in reponses_bloc1.items():
                        prompt += f"- {q} : {r}\n"

                    prompt += "R√©ponds en JSON : { \"orientation\": \"...\", \"resume\": \"...\" }"

                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.7
                    )
                    result_json = json.loads(response.choices[0].message.content)
                    st.session_state["orientation"] = result_json["orientation"]
                    st.session_state["resume"] = result_json["resume"]
                    st.session_state["prenom"] = prenom.strip()
                    st.session_state["etape"] = "bloc2"
                    st.rerun()
                except Exception as e:
                    st.error(f"Erreur GPT : {str(e)}")

# === Bloc 2 ===
elif st.session_state["etape"] == "bloc2":
    st.header("üìò Bloc 2 : Questions cibl√©es")

    profil = st.session_state["orientation"]
    st.success(f"üìö Profil d√©tect√© : {profil}")
    st.markdown(f"**R√©sum√© Bloc 1 :** _{st.session_state['resume']}_")

    literaire_qs = [
        ("Tu dois √©crire un discours. Tu :", ["Note id√©es", "Cherche citations", "R√©dige directement"]),
        ("Dans un d√©bat, tu :", ["Arguments logiques", "√âmotion", "Jeux de mots"]),
        ("Lettre √† un ami :", ["J‚Äô√©cris comme je parle", "Je structure", "Je fais un plan d√©taill√©"]),
    ]
    scientifique_qs = [
        ("Ton v√©lo a un probl√®me. Tu :", ["Observe", "Cherche en ligne", "Demande √† quelqu‚Äôun"]),
        ("Puzzle logique. Tu :", ["Cherche les r√®gles", "Teste au hasard", "Regarde un exemple"]),
        ("Organiser une exp√©rience. Tu :", ["Liste mat√©riel", "D√©finit l‚Äôobjectif", "Note les variables"]),
    ]

    if profil == "scientifique":
        questions = scientifique_qs
    elif profil == "litt√©raire":
        questions = literaire_qs
    else:
        questions = scientifique_qs[:2] + literaire_qs[:1]

    reponses_bloc2 = {}
    for idx, (question, options) in enumerate(questions):
        qkey = f"B2_Q{idx+1}"
        choix = st.radio(f"{question}", options, key=qkey)
        reponses_bloc2[qkey] = choix

    if st.button("üìä Analyse finale"):
        with st.spinner("Analyse des r√©ponses cibl√©es..."):
            try:
                synthese_prompt = f"Profil : {profil}\nPr√©nom : {st.session_state['prenom']}\nR√©ponses Bloc 2 :\n"
                for q, r in reponses_bloc2.items():
                    synthese_prompt += f"- {q} : {r}\n"

                synthese_prompt += "Analyse le fonctionnement cognitif de l‚Äô√©l√®ve et propose un conseil d‚Äôorientation adapt√©."

                completion = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": synthese_prompt}],
                    temperature=0.7
                )
                st.markdown("### üß† Synth√®se finale")
                st.markdown(completion.choices[0].message.content)
            except Exception as e:
                st.error(f"Erreur GPT : {str(e)}")
