import streamlit as st
import os
from openai import OpenAI
import json

# Configuration
st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

# API OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

st.header("üß† R√©ponds aux 15 situations")
prenom = st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

# Questions et options sp√©cifiques
questions = {
    "Q1": ("Ton professeur te donne un expos√© sur un sujet inconnu. Tu as 3 jours. Tu :", [
        "Organises tes id√©es en plan avant de chercher",
        "Commences par √©crire pour voir ce que tu penses",
        "Dessines une carte mentale pour explorer le sujet"
    ]),
    "Q2": ("Un camarade bloque sur un exercice. Il te demande de l‚Äôaide. Tu :", [
        "R√©explique la r√®gle ou m√©thode",
        "Reformules le probl√®me avec tes mots",
        "Inventes une m√©taphore pour l‚Äôaider"
    ]),
    "Q3": ("Ton professeur corrige un devoir en silence au tableau. Tu pr√©f√®res :", [
        "Une correction structur√©e √©tape par √©tape",
        "Une explication orale avec des exemples",
        "Plusieurs m√©thodes compar√©es"
    ]),
    "Q4": ("Tu dois faire un devoir not√©. Tu choisis :", [
        "Un probl√®me avec une seule solution",
        "Une r√©daction libre",
        "Un projet cr√©atif"
    ]),
    "Q5": ("Ton prof pose une question difficile. Tu :", [
        "Tentes ta chance",
        "Attends d‚Äô√™tre certain(e)",
        "Notes la question pour plus tard"
    ]),
    "Q6": ("Un devoir est not√© \"m√©thode originale mais pas rapide\". Tu te dis :", [
        "Chercher une m√©thode plus logique",
        "√ätre fier(e) d‚Äôavoir r√©fl√©chi autrement",
        "Se questionner sur son style"
    ]),
    "Q7": ("Une heure libre au CDI avec Internet. Tu :", [
        "Cherches un tuto sur un sujet qui te passionne",
        "Lis un article, un blog ou regarde une vid√©o d‚Äôanalyse",
        "Dessines, √©cris ou d√©veloppes un projet"
    ]),
    "Q8": ("Un adulte te dit : \"Tu es m√©thodique\". Tu penses :", [
        "Oui, j‚Äôaime que tout soit structur√©",
        "Non, je laisse venir les id√©es",
        "Je suis les deux selon les moments"
    ]),
    "Q9": ("Tu trouves un sujet difficile. Tu pr√©f√®res :", [
        "Faire un exercice pour tester ta compr√©hension",
        "Relire le cours plusieurs fois",
        "Discuter avec quelqu‚Äôun"
    ]),
    "Q10": ("On te propose un atelier libre. Tu choisis :", [
        "Construire une maquette",
        "√âcrire un sc√©nario ou un article",
        "R√©soudre des √©nigmes en √©quipe"
    ]),
    "Q11": ("Tu dois corriger un devoir. Tu regardes surtout :", [
        "Si le raisonnement est juste",
        "Si c‚Äôest bien √©crit",
        "Si l‚Äôid√©e est originale"
    ]),
    "Q12": ("Pendant un expos√© en groupe, tu pr√©f√®res :", [
        "Faire les recherches et organiser le contenu",
        "√âcrire le texte ou le pr√©senter",
        "Cr√©er un support visuel"
    ]),
    "Q13": ("Un prof donne une consigne floue. Tu :", [
        "Demande plus de d√©tails",
        "Proposes une id√©e originale",
        "H√©sites puis improvises"
    ]),
    "Q14": ("Un d√©bat entre deux √©l√®ves. Tu observes :", [
        "Qui a les meilleurs arguments",
        "Qui s‚Äôexprime le plus clairement",
        "Qui est le plus surprenant"
    ]),
    "Q15": ("On te demande de r√©sumer un texte. Tu :", [
        "Identifies les id√©es principales",
        "Reformules avec tes mots",
        "Fais une carte mentale"
    ])
}

reponses = {}
for key, (question, options) in questions.items():
    choix = st.radio(question, options, key=key)
    if choix:
        reponses[key] = choix

if st.button("üîé Analyser mon profil"):
    if len(reponses) < 15 or not prenom:
        st.warning("Merci de r√©pondre √† toutes les questions et d‚Äôentrer ton pr√©nom.")
    else:
        with st.spinner("Analyse en cours..."):
            try:
                prompt = f"""
Tu es un conseiller en orientation scolaire. Voici les r√©ponses d‚Äôun √©l√®ve marocain √† 15 sc√©narios implicites. 
Analyse-les pour d√©terminer :
- Les tendances cognitives dominantes (logique, verbal, visuel, cr√©atif‚Ä¶)
- L‚Äôorientation probable (scientifique, litt√©raire, mixte‚Ä¶)
- Le niveau de clart√© du profil
- Un r√©sum√© personnalis√©

Pr√©nom : {prenom}
R√©ponses :
"""
                for q, r in reponses.items():
                    prompt += f"- {q} : {r}\n"

                prompt += """
R√©ponds en JSON :
{
  "tendances": [...],
  "orientation": "...",
  "niveau_certitude": "...",
  "resume": "..."
}
"""

                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                result_json = json.loads(response.choices[0].message.content)

                st.success("üéØ R√©sultat")
                st.markdown(f"**üßë Pr√©nom :** {prenom}")
                st.markdown(f"**üìö Orientation recommand√©e :** `{result_json['orientation']}`")
                st.markdown(f"**üß≠ Tendances cognitives :** {', '.join(result_json['tendances'])}")
                st.markdown(f"**üìä Niveau de clart√© :** {result_json['niveau_certitude']}")
                st.markdown("**üìù R√©sum√© :**")
                st.markdown(f"> {result_json['resume']}")

                if st.button("‚ûï G√©n√©rer des questions cibl√©es (Q16‚ÄìQ30)"):
                    profil = result_json['orientation']
                    st.info(f"Questions adapt√©es pour un profil {profil.upper()} en cours de g√©n√©ration...")

                    adaptation_prompt = f"""
Tu es un cr√©ateur de tests d‚Äôorientation. En te basant sur le profil suivant : {profil}, g√©n√®re 15 nouvelles questions cibl√©es Q16 √† Q30. Chaque question doit √™tre implicite, contextuelle, et li√©e aux comp√©tences de ce profil.
R√©ponds sous ce format :
- Q16 : [question]
- Q17 : [question]
...
- Q30 : [question]
"""
                    followup = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": adaptation_prompt}],
                        temperature=0.7
                    )
                    st.markdown("### üéØ Questions cibl√©es :")
                    st.markdown(followup.choices[0].message.content)

            except Exception as e:
                st.error("Erreur : " + str(e))
