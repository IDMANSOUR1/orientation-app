import streamlit as st
import os
import base64
from io import BytesIO
from fpdf import FPDF
import matplotlib.pyplot as plt
import numpy as np
from openai import OpenAI

# Configuration
st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

# Cl√© API (√† ajouter dans les secrets Streamlit)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Questions implicites
questions = {
    "Q1": "Ton professeur te donne un expos√© √† faire sur un sujet que tu ne connais pas. Tu as 3 jours. Tu :",
    "Q2": "Un camarade bloque sur un exercice. Il te demande de l‚Äôaide. Tu :",
    "Q3": "En classe, ton professeur corrige un devoir en silence au tableau. Tu pr√©f√®res :",
    "Q4": "Tu dois pr√©parer un devoir not√©. Tu as le choix :",
    "Q5": "Pendant un cours, ton prof pose une question difficile. Tu :",
    "Q6": "Tu re√ßois un devoir corrig√© avec cette remarque : \"Ta m√©thode n‚Äô√©tait pas la plus rapide, mais elle est originale.\" Tu te dis :",
    "Q7": "Tu as une heure de libert√© dans un CDI avec Internet. Tu fais quoi ?",
    "Q8": "Un adulte te dit : \"Tu es quelqu‚Äôun de tr√®s m√©thodique.\" Tu penses :",
    "Q9": "Un nouveau sujet te para√Æt difficile √† comprendre. Tu pr√©f√®res :",
    "Q10": "On te propose de participer √† un atelier pendant une semaine. Tu choisis :",
    "Q11": "Tu dois corriger un travail. Tu es plus attentif(ve) √† :",
    "Q12": "Pendant un expos√© en groupe, tu pr√©f√®res :",
    "Q13": "Un prof te donne une consigne vague pour un projet libre. Tu ressens :",
    "Q14": "Tu assistes √† un d√©bat entre deux √©l√®ves. Tu observes surtout :",
    "Q15": "Ton professeur te demande de r√©sumer un texte long. Tu commences par :"
}

# R√©ponses disponibles (exemple g√©n√©rique √† adapter pour chaque question)
reponse_options = [
    "-- S√©lectionne --",
    "Option A",
    "Option B",
    "Option C"
]

# Interface questions
st.header("üß† R√©ponds aux 15 situations")
prenom = st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

reponses = {}
for key, question in questions.items():
    choix = st.radio(question, reponse_options, key=key)
    if choix != reponse_options[0]:
        reponses[key] = choix

# Bouton analyse
if st.button("üîé Analyser mon profil"):
    if len(reponses) < 15 or not prenom:
        st.warning("Merci de r√©pondre √† toutes les questions et d‚Äôentrer ton pr√©nom.")
    else:
        with st.spinner("Analyse en cours..."):
            try:
                prompt = f"""
Tu es un expert en orientation scolaire. Voici les r√©ponses d‚Äôun √©l√®ve √† 15 sc√©narios projectifs. Analyse-les pour d√©tecter :
1. Les tendances cognitives dominantes (logique, verbal, visuel, cr√©atif‚Ä¶)
2. L‚Äôorientation potentielle (scientifique, litt√©raire, mixte‚Ä¶)
3. Si le profil est clair ou contradictoire
4. Une phrase de r√©sum√© personnalis√©e

R√©ponses de l'√©l√®ve {prenom} :
"""
                for q, r in reponses.items():
                    prompt += f"- {q} : {r}\n"

                prompt += """
R√©ponds au format JSON :
{
  "tendances": [...],
  "orientation": "...",
  "niveau_certitude": "...",
  "resume": "..."
}
"""

                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                result_text = response.choices[0].message.content
                st.success("üéØ R√©sultat")
                st.markdown(result_text)

            except Exception as e:
                st.error("Erreur : " + str(e))
