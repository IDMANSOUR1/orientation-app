import streamlit as st
import os
import json
from openai import OpenAI

st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

if "etape" not in st.session_state:
    st.session_state["etape"] = "bloc1"

if "prenom" not in st.session_state:
    st.session_state["prenom"] = ""

# === Bloc 1 ===
if st.session_state["etape"] == "bloc1":
    st.header("üß† Bloc 1 : Situations g√©n√©rales")
    st.session_state["prenom"] = st.text_input("Pr√©nom de l'√©l√®ve :", value=st.session_state["prenom"])

    questions_bloc1 = { f"Q{i+1}": question for i, question in enumerate([
        ("Ton professeur te donne un expos√©...", ["Organises les id√©es...", "Commences par √©crire...", "Dessines un sch√©ma..."]),
        ("Un camarade bloque sur un exercice...", ["R√©explique...", "Reformules...", "Inventes..."]),
        ("En classe, ton professeur corrige...", ["Structur√©", "Expliqu√© √† voix haute", "Plusieurs m√©thodes"]),
        ("Tu dois pr√©parer un devoir...", ["Probl√®me", "Dissertation", "Projet cr√©atif"]),
        ("Pendant un cours, ton prof pose...", ["Lances-toi", "Attends", "Note la question"]),
        ("Tu re√ßois un devoir corrig√©...", ["Plus logique", "Fier", "Se questionner"]),
        ("Tu as une heure au CDI...", ["Cherches un tuto", "Lis un article", "Cr√©es un projet"]),
        ("Un adulte dit : 'Tu es m√©thodique'", ["Oui", "Non", "Un peu des deux"]),
        ("Un nouveau sujet te para√Æt difficile...", ["Exercice", "Lire", "Discuter"]),
        ("On te propose un atelier...", ["Construire", "Ecrire", "R√©soudre"]),
        ("Tu dois corriger un travail...", ["Raisonnement", "Texte clair", "Id√©e originale"]),
        ("Expos√© en groupe...", ["Recherches", "Texte/Oral", "Support visuel"]),
        ("Consigne floue...", ["Demander", "Proposer", "Improviser"]),
        ("Un d√©bat...", ["Arguments", "Clart√©", "Id√©es surprenantes"]),
        ("R√©sumer un texte...", ["Id√©es principales", "Reformuler", "Carte mentale"]),
    ])}

    reponses_bloc1 = {}
    for key, (question, options) in questions_bloc1.items():
        choix = st.radio(f"{key} : {question}", options, key=key)
        if choix:
            reponses_bloc1[key] = choix

    if st.button("‚û°Ô∏è Suivant"):
        if len(reponses_bloc1) < 15 or not st.session_state["prenom"].strip():
            st.warning("Merci de r√©pondre √† toutes les questions.")
        else:
            prompt = f"""
Voici les r√©ponses de l'√©l√®ve :
{json.dumps(reponses_bloc1, indent=2)}

Estime son profil : scientifique, litt√©raire ou mixte. R√©ponds uniquement avec :
{{"profil": "..."}}
            """
            try:
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                profil = json.loads(response.choices[0].message.content)["profil"]
                st.session_state["profil"] = profil
                st.session_state["etape"] = "bloc2"
                st.rerun()
            except Exception as e:
                st.error(str(e))

# === Bloc 2 ===
elif st.session_state["etape"] == "bloc2":
    st.header("üìò Bloc 2 : Questions cibl√©es")
    profil = st.session_state["profil"]
    st.info(f"Profil estim√© : {profil}")

    questions_sci = [
        ("Tu d√©couvres un concept scientifique...", ["Lire", "Vid√©o", "Exp√©rience"]),
        ("Cr√©er une affiche scientifique...", ["Donn√©es", "Exp√©rience", "Sch√©ma"]),
        ("Probl√®me de maths...", ["M√©thode connue", "Tester", "Exemple"]),
        ("Ce que tu pr√©f√®res en sciences...", ["Lois", "Applications", "Id√©es"]),
        ("Lire un probl√®me...", ["D√©tails", "Visualiser", "Oral"]),
        ("Projet en sciences...", ["Maquette", "Recherche", "Expos√©"]),
        ("Stage en labo...", ["Manipuler", "Observer", "Hypoth√®se"]),
        ("Maths : satisfaction...", ["Raisonnement", "Expliquer", "Nouvelle m√©thode"]),
        ("Syst√®me complexe...", ["D√©composer", "Relations", "Simulation"]),
        ("Sortie √©ducative...", ["Mus√©e", "Atelier", "Exp√©rience"])
    ]

    questions_lit = [
        ("Lettre √† un personnage historique...", ["Contexte", "Langage", "Fiction"]),
        ("Cr√©er un blog...", ["Argumenter", "T√©moigner", "Toucher"]),
        ("Fran√ßais : pr√©f√©r√©...", ["D√©bat", "Analyse", "Invention"]),
        ("Texte ancien...", ["Contexte", "Style", "Adapter"]),
        ("D√©fendre une id√©e...", ["Arguments", "Exemples", "Ton"]),
        ("Langue...", ["Traduire", "Jouer", "Dialogues"]),
        ("Livre ou film...", ["Message", "√âmotions", "Narration"]),
        ("Podcast...", ["Id√©e", "Interview", "Lecture"]),
        ("Biblioth√®que...", ["Romans", "Analyse", "Po√©sie"]),
        ("Spectacle...", ["Sc√©nario", "R√¥le", "Sc√®ne"])
    ]

    questions_bloc2 = questions_sci if profil == "scientifique" else questions_lit

    reponses_bloc2 = {}
    for i, (q, opts) in enumerate(questions_bloc2):
        choix = st.radio(f"Q{i+1} : {q}", opts, key=f"b2q{i+1}")
        reponses_bloc2[f"Q{i+1}"] = choix

    if st.button("‚û°Ô∏è Suivant"):
        st.session_state["bloc2_reponses"] = reponses_bloc2
        st.session_state["etape"] = "bloc3"
        st.rerun()

# === Bloc 3 ===
elif st.session_state["etape"] == "bloc3":
    st.header("üß™ Bloc 3 : Confirmation par situation complexe")
    profil = st.session_state["profil"]
    prompt = f"""
G√©n√®re une situation complexe et r√©aliste pour un coll√©gien marocain, sp√©cifique au profil suivant : {profil}.

Inclue une histoire ou un contexte impliquant une d√©cision, un probl√®me ou une initiative personnelle.
Puis pose 3  questions ouvertes qui permettent de v√©rifier ses comp√©tences, son raisonnement, ses valeurs, sa personnalit√©.

Objectif : valider ou ajuster le profil avec une analyse finale.
"""
    try:
        rep = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        st.markdown(rep.choices[0].message.content)

        st.text_area("üìù Tes r√©ponses ici (copie-colle si besoin) :", key="bloc3_text")

        if st.button("üìà Analyse finale"):
            analyse_prompt = f"Voici toutes les r√©ponses des blocs 1, 2 et 3 pour {st.session_state['prenom']} :\n"
            analyse_prompt += json.dumps(st.session_state.get("bloc2_reponses", {}), indent=2)
            analyse_prompt += f"\nEt voici ses r√©flexions ouvertes : {st.session_state['bloc3_text']}\n"
            analyse_prompt += "D√©duis son profil final (scientifique/litt√©raire/mixte), ses qualit√©s et conseille-le."

            completion = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": analyse_prompt}],
                temperature=0.7
            )
            st.success("üéì Profil Final")
            st.markdown(completion.choices[0].message.content)
    except Exception as e:
        st.error(str(e))
