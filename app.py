import streamlit as st
import os
from openai import OpenAI
import json

st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Navigation multi-pages
page = st.sidebar.radio("Choisir une section", ["üß† Bloc 1 : Situations g√©n√©rales", "üìò Bloc 2 : Questions cibl√©es"])

# Bloc 1 : Questions Q1‚ÄìQ15
if page == "üß† Bloc 1 : Situations g√©n√©rales":
    st.header("üß† R√©ponds aux 15 situations")
    prenom = st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

    questions = {
        "Q1": ("Ton professeur te donne un expos√© sur un sujet inconnu. Tu as 3 jours. Tu :", [
            "Organises tes id√©es en plan avant de chercher",
            "Commences par √©crire pour voir ce que tu penses",
            "Dessines une carte mentale pour explorer le sujet"
        ]),
        "Q2": ("Un camarade bloque sur un exercice. Il te demande de l‚Äôaide. Tu :", [
            "R√©explique la r√®gle ou m√©thode",
            "Reformules le probl√®me avec tes mots",
            "Inventes une m√©taphore pour l‚Äôaider"
        ]),
        "Q3": ("Ton professeur corrige un devoir en silence au tableau. Tu pr√©f√®res :", [
            "Une correction structur√©e √©tape par √©tape",
            "Une explication orale avec des exemples",
            "Plusieurs m√©thodes compar√©es"
        ]),
        "Q4": ("Tu dois faire un devoir not√©. Tu choisis :", [
            "Un probl√®me avec une seule solution",
            "Une r√©daction libre",
            "Un projet cr√©atif"
        ]),
        "Q5": ("Ton prof pose une question difficile. Tu :", [
            "Tentes ta chance",
            "Attends d‚Äô√™tre certain(e)",
            "Notes la question pour plus tard"
        ]),
        "Q6": ("Un devoir est not√© 'm√©thode originale mais pas rapide'. Tu te dis :", [
            "Chercher une m√©thode plus logique",
            "√ätre fier(e) d‚Äôavoir r√©fl√©chi autrement",
            "Se questionner sur son style"
        ]),
        "Q7": ("Une heure libre au CDI avec Internet. Tu :", [
            "Cherches un tuto sur un sujet qui te passionne",
            "Lis un article, un blog ou regarde une vid√©o d‚Äôanalyse",
            "Dessines, √©cris ou d√©veloppes un projet"
        ]),
        "Q8": ("Un adulte te dit : 'Tu es m√©thodique'. Tu penses :", [
            "Oui, j‚Äôaime que tout soit structur√©",
            "Non, je laisse venir les id√©es",
            "Je suis les deux selon les moments"
        ]),
        "Q9": ("Tu trouves un sujet difficile. Tu pr√©f√®res :", [
            "Faire un exercice pour tester ta compr√©hension",
            "Relire le cours plusieurs fois",
            "Discuter avec quelqu‚Äôun"
        ]),
        "Q10": ("On te propose un atelier libre. Tu choisis :", [
            "Construire une maquette",
            "√âcrire un sc√©nario ou un article",
            "R√©soudre des √©nigmes en √©quipe"
        ]),
        "Q11": ("Tu dois corriger un devoir. Tu regardes surtout :", [
            "Si le raisonnement est juste",
            "Si c‚Äôest bien √©crit",
            "Si l‚Äôid√©e est originale"
        ]),
        "Q12": ("Pendant un expos√© en groupe, tu pr√©f√®res :", [
            "Faire les recherches et organiser le contenu",
            "√âcrire le texte ou le pr√©senter",
            "Cr√©er un support visuel"
        ]),
        "Q13": ("Un prof donne une consigne floue. Tu :", [
            "Demande plus de d√©tails",
            "Proposes une id√©e originale",
            "H√©sites puis improvises"
        ]),
        "Q14": ("Un d√©bat entre deux √©l√®ves. Tu observes :", [
            "Qui a les meilleurs arguments",
            "Qui s‚Äôexprime le plus clairement",
            "Qui est le plus surprenant"
        ]),
        "Q15": ("On te demande de r√©sumer un texte. Tu :", [
            "Identifies les id√©es principales",
            "Reformules avec tes mots",
            "Fais une carte mentale"
        ])
    }

    reponses = {}
    for key, (question, options) in questions.items():
        choix = st.radio(question, options, key=key)
        if choix:
            reponses[key] = choix

    if st.button("üîé Analyser mon profil"):
        if len(reponses) < len(questions) or not prenom.strip():
            st.warning("Merci de r√©pondre √† toutes les questions et d‚Äôentrer ton pr√©nom.")
        else:
            with st.spinner("Analyse en cours..."):
                try:
                    prompt = f"""
Voici les r√©ponses d‚Äôun √©l√®ve marocain √† un test d‚Äôorientation implicite. D√©duis son profil dominant (scientifique, litt√©raire ou mixte), et propose une synth√®se.

Pr√©nom : {prenom.strip()}
R√©ponses :
"""
                    for q, r in reponses.items():
                        prompt += f"- {q} : {r}\n"

                    prompt += """
R√©ponds en JSON :
{
  "orientation": "scientifique/litt√©raire/mixte",
  "resume": "..."
}
"""

                    response = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.7
                    )
                    result_json = json.loads(response.choices[0].message.content)

                    st.success("üéØ R√©sultat")
                    st.markdown(f"**üßë Pr√©nom :** {prenom.strip()}")
                    st.markdown(f"**üìö Orientation recommand√©e :** `{result_json['orientation']}`")
                    st.markdown("**üìù R√©sum√© :**")
                    st.markdown(f"> {result_json['resume']}" )

                    st.session_state["profil"] = result_json['orientation']

                except Exception as e:
                    st.error(f"‚ùå Une erreur est survenue : {str(e)}")

# Bloc 2 : Questions cibl√©es selon le profil
if page == "üìò Bloc 2 : Questions cibl√©es":
    st.header("üìò Bloc 2 : Questions selon ton profil")

    if "profil" in st.session_state:
        profil = st.session_state["profil"].lower()

        literaire_questions = [
            ("Tu dois √©crire un discours pour convaincre : que fais-tu en premier ?", ["Je note mes id√©es cl√©s", "Je cherche des citations", "Je r√©dige directement"]),
            ("Dans un d√©bat, tu pr√©f√®res :", ["Pr√©senter des arguments logiques", "Toucher les √©motions", "Jouer avec les mots"]),
            ("Tu √©cris une lettre √† un ami pour exprimer une id√©e : comment tu t‚Äôy prends ?", ["J‚Äô√©cris comme je parle", "Je structure d‚Äôabord mes id√©es", "Je fais un plan d√©taill√©"])
        ]

        scientifique_questions = [
            ("Tu rencontres un probl√®me avec ton v√©lo. Quelle est ta premi√®re r√©action ?", ["Observer et identifier le probl√®me", "Chercher une solution sur Internet", "Demander √† quelqu‚Äôun"]),
            ("On te donne un puzzle logique. Que fais-tu ?", ["Je cherche les r√®gles du jeu", "Je commence au hasard pour tester", "Je regarde un exemple"]),
            ("Tu dois organiser une exp√©rience. Quelle √©tape passes-tu en premier ?", ["Lister le mat√©riel n√©cessaire", "D√©finir l‚Äôobjectif", "Noter les variables"])
        ]

        if profil == "litt√©raire":
            ciblees = literaire_questions
        elif profil == "scientifique":
            ciblees = scientifique_questions
        else:
            ciblees = literaire_questions[:2] + scientifique_questions[:1]

        reponses_bloc2 = {}
        for idx, (question, options) in enumerate(ciblees):
            choix = st.radio(f"Q{16 + idx} : {question}", options, key=f"Q{16 + idx}")
            reponses_bloc2[f"Q{16 + idx}"] = choix

        if st.button("üìä Analyser mes r√©ponses du Bloc 2"):
            with st.spinner("Analyse en cours..."):
                try:
                    summary_prompt = f"""
Voici les r√©ponses d‚Äôun √©l√®ve √† un bloc de questions cibl√©es pour l‚Äôorientation scolaire. Analyse ces r√©ponses pour d√©tecter des traits cognitifs, des pr√©f√©rences ou des comportements li√©s √† l‚Äôapprentissage, en lien avec le profil estim√© ({profil}).

R√©ponses Bloc 2 :
"""
                    for q, r in reponses_bloc2.items():
                        summary_prompt += f"- {q} : {r}\n"

                    summary_prompt += """
R√©dige une br√®ve synth√®se sur son fonctionnement cognitif et donne un conseil adapt√©.
"""
                    completion = client.chat.completions.create(
                        model="gpt-4",
                        messages=[{"role": "user", "content": summary_prompt}],
                        temperature=0.7
                    )
                    synthese = completion.choices[0].message.content
                    st.markdown("### üß† Analyse Bloc 2")
                    st.markdown(synthese)
                except Exception as e:
                    st.error(f"Erreur GPT : {str(e)}")
    else:
        st.warning("Veuillez d'abord compl√©ter le Bloc 1 pour obtenir un profil d'orientation.")
