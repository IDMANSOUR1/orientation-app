import streamlit as st
import openai
import base64
from io import BytesIO
from fpdf import FPDF
import numpy as np
import matplotlib.pyplot as plt

# Configuration
st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Questionnaire d‚ÄôOrientation Scolaire")

# Cl√© API
openai.api_key = "sk-...VOTRE_CL√â_ICI..."

# Navigation
page = st.sidebar.selectbox("üìÇ Choisir une section", [
    "üß† Personnalit√©", "üí™ Comp√©tences", "‚ù§Ô∏è Pr√©f√©rences", "üìä R√©sum√©"
])

# ========== SECTION 1 : Personnalit√© ==========
if page == "üß† Personnalit√©":
    st.header("üß† Profil de personnalit√©")

    st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

    options1 = ["-- S√©lectionne --", "Seul(e)", "En groupe", "Les deux"]
    g = st.radio("Pr√©f√©res-tu travailler seul(e) ou en groupe ?", options1, key="groupe")
    if g != "-- S√©lectionne --":
        st.session_state["groupe"] = g

    options2 = ["-- S√©lectionne --", "Organis√©(e)", "Spontan√©(e)"]
    o = st.radio("Es-tu plut√¥t organis√©(e) ou spontan√©(e) ?", options2, key="organisation")
    if o != "-- S√©lectionne --":
        st.session_state["organisation"] = o

    options3 = ["-- S√©lectionne --", "Essaies de comprendre", "Te d√©courages", "Cherches de l‚Äôaide"]
    e = st.radio("Quand tu fais une erreur, tu :", options3, key="erreur")
    if e != "-- S√©lectionne --":
        st.session_state["erreur"] = e

    options4 = ["-- S√©lectionne --", "Suivre les consignes", "Inventer ta m√©thode", "Un peu des deux"]
    c = st.radio("Tu pr√©f√®res :", options4, key="consignes")
    if c != "-- S√©lectionne --":
        st.session_state["consignes"] = c

    options5 = ["-- S√©lectionne --", "Oui", "Non", "Parfois"]
    cu = st.radio("Te d√©cris-tu comme quelqu‚Äôun de curieux(se) ?", options5, key="curiosite")
    if cu != "-- S√©lectionne --":
        st.session_state["curiosite"] = cu

# ========== SECTION 2 : Comp√©tences ==========
elif page == "üí™ Comp√©tences":
    st.header("üí™ Tes comp√©tences")

    options6 = ["-- S√©lectionne --", "√Ä l‚Äô√©crit", "√Ä l‚Äôoral", "Les deux"]
    exp = st.radio("Es-tu plus √† l‚Äôaise √† l‚Äô√©crit ou √† l‚Äôoral ?", options6, key="expression")
    if exp != "-- S√©lectionne --":
        st.session_state["expression"] = exp

    options7 = ["-- S√©lectionne --", "Oui", "Non", "Parfois"]
    expl = st.radio("Sais-tu expliquer facilement une id√©e aux autres ?", options7, key="expliquer")
    if expl != "-- S√©lectionne --":
        st.session_state["expliquer"] = expl

    options8 = ["-- S√©lectionne --", "Oui", "Non", "Un peu"]
    num = st.radio("Es-tu √† l‚Äôaise avec les outils num√©riques ?", options8, key="numerique")
    if num != "-- S√©lectionne --":
        st.session_state["numerique"] = num

    prob = st.radio("Aimes-tu r√©soudre des probl√®mes complexes ?", options7, key="probleme")
    if prob != "-- S√©lectionne --":
        st.session_state["probleme"] = prob

# ========== SECTION 3 : Pr√©f√©rences ==========
elif page == "‚ù§Ô∏è Pr√©f√©rences":
    st.header("‚ù§Ô∏è Tes pr√©f√©rences")

    options9 = ["-- S√©lectionne --", "Maths", "Fran√ßais", "SVT", "Histoire", "Physique", "Langues", "Arts", "Sport", "Autre"]
    mat = st.selectbox("Quelle mati√®re pr√©f√®res-tu √† l‚Äô√©cole ?", options9, key="matiere")
    if mat != "-- S√©lectionne --":
        st.session_state["matiere"] = mat

    options10 = ["-- S√©lectionne --", "Lire", "Dessiner", "Bricoler", "Jouer", "√âcouter de la musique", "Autre"]
    act = st.radio("Chez toi, tu pr√©f√®res :", options10, key="activite")
    if act != "-- S√©lectionne --":
        st.session_state["activite"] = act

    crea = st.radio("Aimes-tu les activit√©s cr√©atives ?", options7, key="creativite")
    if crea != "-- S√©lectionne --":
        st.session_state["creativite"] = crea

    rep = st.radio("Tu t‚Äôennuies vite quand une activit√© est r√©p√©titive ?", options7, key="repetition")
    if rep != "-- S√©lectionne --":
        st.session_state["repetition"] = rep

    options11 = ["-- S√©lectionne --", "L‚Äôhistoire", "Les images/effets", "Le message profond"]
    film = st.radio("Dans un film, tu pr√©f√®res :", options11, key="film")
    if film != "-- S√©lectionne --":
        st.session_state["film"] = film

# ========== SECTION 4 : R√©sum√© ==========
elif page == "üìä R√©sum√©":
    st.header("üìä R√©sum√© de tes r√©ponses")
    prenom = st.session_state.get("prenom", "")
    if prenom:
        st.markdown(f"üë§ **√âl√®ve : {prenom}**")

    reponses = {
        "Travail en groupe": st.session_state.get("groupe", ""),
        "Organisation": st.session_state.get("organisation", ""),
        "Face √† l‚Äôerreur": st.session_state.get("erreur", ""),
        "Respect des consignes": st.session_state.get("consignes", ""),
        "Curiosit√©": st.session_state.get("curiosite", ""),
        "Expression pr√©f√©r√©e": st.session_state.get("expression", ""),
        "Expliquer une id√©e": st.session_state.get("expliquer", ""),
        "Comp√©tences num√©riques": st.session_state.get("numerique", ""),
        "R√©solution de probl√®me": st.session_state.get("probleme", ""),
        "Mati√®re pr√©f√©r√©e": st.session_state.get("matiere", ""),
        "Activit√© √† la maison": st.session_state.get("activite", ""),
        "Cr√©ativit√©": st.session_state.get("creativite", ""),
        "R√©p√©tition": st.session_state.get("repetition", ""),
        "Film pr√©f√©r√©": st.session_state.get("film", "")
    }

    for question, reponse in reponses.items():
        if reponse and reponse != "-- S√©lectionne --":
            st.write(f"**{question}** : {reponse}")

    if st.button("üîé Analyser mon profil"):
        with st.spinner("Analyse en cours..."):
            try:
                prompt = f"Pr√©nom de l'√©l√®ve : {prenom}\n\nVoici ses r√©ponses :\n"
                for q, r in reponses.items():
                    if r and r != "-- S√©lectionne --":
                        prompt += f"- {q} : {r}\n"
                prompt += """
Analyse ces r√©ponses. Donne une orientation (scientifique, litt√©raire ou mixte), une justification et un score sur 10 pour :
- Logique
- Cr√©ativit√©
- Communication
- Curiosit√© scientifique
- Expression artistique
"""

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7
                )
                result_text = response.choices[0].message["content"]
                st.success("üéØ R√©sultat")
                st.markdown(result_text)

                # Graphe radar
                scores = {}
                for line in result_text.splitlines():
                    if ":" in line and any(k in line.lower() for k in ["logique", "cr√©ativit√©", "communication", "curiosit√©", "artistique"]):
                        key, val = line.split(":")
                        try:
                            scores[key.strip().capitalize()] = float(val.strip().replace("/10", "").replace(",", "."))
                        except:
                            pass

                if scores:
                    st.markdown("### üìä Visualisation du profil")
                    labels = list(scores.keys())
                    values = list(scores.values())
                    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
                    values += values[:1]
                    angles += angles[:1]
                    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
                    ax.plot(angles, values, color='blue', linewidth=2)
                    ax.fill(angles, values, color='skyblue', alpha=0.4)
                    ax.set_yticklabels([])
                    ax.set_xticks(angles[:-1])
                    ax.set_xticklabels(labels)
                    st.pyplot(fig)

                # PDF
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                pdf.multi_cell(0, 10, f"Orientation scolaire pour : {prenom}")
                for q, r in reponses.items():
                    if r and r != "-- S√©lectionne --":
                        pdf.multi_cell(0, 10, f"{q} : {r}")
                pdf.multi_cell(0, 10, "\nR√©sultat IA :")
                pdf.multi_cell(0, 10, result_text)
                buffer = BytesIO()
                buffer.write(pdf.output(dest='S').encode("latin-1"))
                b64 = base64.b64encode(buffer.getvalue()).decode()
                href = f'<a href="data:application/octet-stream;base64,{b64}" download="orientation_resultat.pdf">üìÑ T√©l√©charger le PDF</a>'
                st.markdown(href, unsafe_allow_html=True)

            except Exception as e:
                st.error("‚ùå Erreur : " + str(e))
