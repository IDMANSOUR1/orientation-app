import streamlit as st
import os
from openai import OpenAI
import json

st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Test d'Orientation Implicite")

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

if "etape" not in st.session_state:
    st.session_state["etape"] = "bloc1"

# === Bloc 1 ===
if st.session_state["etape"] == "bloc1":
    st.header("üß† Bloc 1 : Situations g√©n√©rales")
    prenom = st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

    questions_bloc1 = {
        "Q1": ("Ton professeur te donne un expos√© √† faire sur un sujet que tu ne connais pas du tout. Tu as 3 jours. Tu :", [
            "Organises les id√©es en plan avant de commencer √† chercher",
            "Commences par √©crire des phrases pour voir ce que tu en penses",
            "Dessines un sch√©ma ou une carte mentale pour explorer le sujet"
        ]),
        "Q2": ("Un camarade bloque sur un exercice. Il te demande de l‚Äôaide. Tu :", [
            "R√©explique la r√®gle ou la m√©thode",
            "Reformules le probl√®me avec tes propres mots",
            "Inventes une analogie ou une m√©taphore pour l‚Äôaider"
        ]),
        # ... ajoute jusqu'√† Q15 comme tu l'avais d√©j√† fait ...
    }

    reponses_bloc1 = {}
    for key, (question, options) in questions_bloc1.items():
        choix = st.radio(question, options, key=key)
        if choix:
            reponses_bloc1[key] = choix

    if st.button("‚û°Ô∏è Suivant"):
        if len(reponses_bloc1) < len(questions_bloc1) or not prenom.strip():
            st.warning("Merci de r√©pondre √† toutes les questions et d‚Äôentrer ton pr√©nom.")
        else:
            prompt = f"Voici les r√©ponses d‚Äôun √©l√®ve marocain. D√©duis son profil dominant : scientifique, litt√©raire ou mixte.\nPr√©nom : {prenom.strip()}\n"
            for q, r in reponses_bloc1.items():
                prompt += f"- {q} : {r}\n"
            prompt += "R√©ponds en JSON : { \"orientation\": \"...\", \"resume\": \"...\" }"

            response = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            result_json = json.loads(response.choices[0].message.content)
            st.session_state["orientation"] = result_json["orientation"]
            st.session_state["resume"] = result_json["resume"]
            st.session_state["prenom_resultat"] = prenom.strip()
            st.session_state["etape"] = "bloc2"
            st.rerun()

# === Bloc 2 ===
elif st.session_state["etape"] == "bloc2":
    st.header("üìò Bloc 2 : Questions cibl√©es")

    profil = st.session_state["orientation"]
    st.success(f"üìö Profil d√©tect√© : {profil}")
    st.markdown(f"**R√©sum√© Bloc 1 :** _{st.session_state['resume']}_")

    questions = []
    if profil == "scientifique":
        questions = [
            ("Tu d√©couvres un nouveau concept en physique. Tu pr√©f√®res :", ["Lire des explications", "Regarder des exp√©riences", "Tester par toi-m√™me"]),
            # ... jusqu‚Äô√† 10 questions scientifiques ...
        ]
    elif profil == "litt√©raire":
        questions = [
            ("Tu dois √©crire une lettre √† un personnage historique. Tu :", ["Imagines le contexte", "Utilises un style soutenu", "Racontes une fiction"]),
            # ... jusqu‚Äô√† 10 questions litt√©raires ...
        ]

    reponses_bloc2 = {}
    for idx, (question, options) in enumerate(questions):
        qkey = f"B2_Q{idx+1}"
        choix = st.radio(question, options, key=qkey)
        reponses_bloc2[qkey] = choix

    if st.button("‚û°Ô∏è Suivant (Analyse + Bloc 3)"):
        try:
            synthese_prompt = f"Profil : {profil}\nPr√©nom : {st.session_state['prenom_resultat']}\nR√©ponses Bloc 2 :\n"
            for q, r in reponses_bloc2.items():
                synthese_prompt += f"- {q} : {r}\n"
            synthese_prompt += "Analyse les points forts et pr√©pare l‚Äô√©l√®ve au Bloc 3."

            synthese = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": synthese_prompt}],
                temperature=0.7
            ).choices[0].message.content

            st.session_state["synthese_bloc2"] = synthese
            st.session_state["etape"] = "bloc3"
            st.rerun()
        except Exception as e:
            st.error(f"Erreur GPT : {str(e)}")

# === Bloc 3 ===
elif st.session_state["etape"] == "bloc3":
    st.header("üîç Bloc 3 : Confirmation par situation complexe")

    profil = st.session_state["orientation"]
    st.markdown(f"**üìö Profil pr√©dit :** {profil}")
    st.markdown(f"**üìù Synth√®se Bloc 2 :** {st.session_state['synthese_bloc2']}")

    try:
        prompt_situation = f"""
Tu es un expert en orientation scolaire.

G√©n√®re une **situation complexe** adapt√©e √† un jeune √©l√®ve marocain (niveau coll√®ge ou d√©but lyc√©e), au **profil estim√© : {profil}**.

üéØ Objectif : v√©rifier la **coh√©rence du profil** √† partir d‚Äôune situation qui mobilise :
- la mani√®re de r√©fl√©chir (logique, cr√©ativit√©, intuition‚Ä¶)
- la fa√ßon d‚Äôapprendre (m√©moire, exp√©rimentation, discussion‚Ä¶)
- l‚Äôexpression personnelle (√©crite ou orale)
- la posture face √† l‚Äôincertitude, √† l‚Äôautonomie et √† la r√©solution de probl√®mes

üß© Format attendu :
1. Une situation concr√®te, r√©aliste, et engageante, en 4 √† 6 lignes maximum.
   - Elle peut √™tre scolaire ou non (vie quotidienne, projet, discussion‚Ä¶)
   - Elle doit int√©grer au moins 2 dimensions cognitives ou expressives
2. Ensuite, 3 √† 5 **questions ouvertes** claires et stimulantes, qui invitent l‚Äô√©l√®ve √† r√©fl√©chir, s‚Äôexprimer, justifier, imaginer.

üìù Style :
- Langage accessible, direct, sans vocabulaire acad√©mique complexe.
- Aucun diagnostic. Ne conclus rien.
- Ne donne pas de r√©ponses, uniquement la **situation + les questions**.

Exemples :
- Profil scientifique : situation o√π il faut r√©soudre un probl√®me ou organiser un projet concret.
- Profil litt√©raire : situation o√π il faut argumenter, raconter ou interpr√©ter un √©v√©nement.

G√©n√®re maintenant la situation et les questions.
"""

            messages=[{"role": "user", "content": prompt_situation}],
            temperature=0.7
        ).choices[0].message.content

        st.markdown("### üìò Situation complexe √† r√©soudre")
        st.markdown(situation)

        rep1 = st.text_area("R√©ponse 1")
        rep2 = st.text_area("R√©ponse 2")
        rep3 = st.text_area("R√©ponse 3")

        if st.button("üìç Analyse finale et profil confirm√©"):
            prompt_final = f"""Voici les r√©ponses √† une situation complexe pour un √©l√®ve au profil {profil} :
1. {rep1}
2. {rep2}
3. {rep3}

Analyse-les pour confirmer ou ajuster le profil (scientifique/litt√©raire/mixte) et donne une recommandation claire et motivante."""

            final = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt_final}],
                temperature=0.7
            ).choices[0].message.content

            st.markdown("## ‚úÖ R√©sultat final")
            st.markdown(final)

    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration de la situation complexe : {str(e)}")
