import streamlit as st
import os
import base64
from io import BytesIO
from fpdf import FPDF
import numpy as np
import matplotlib.pyplot as plt
import re
from openai import OpenAI

# Configuration
st.set_page_config(page_title="Orientation Coll√®ge Maroc", layout="centered")
st.title("üéì Questionnaire d‚ÄôOrientation Scolaire")

# Cl√© API (√† ajouter dans Secrets sur Streamlit Cloud)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Navigation
page = st.sidebar.selectbox("üìÇ Choisir une section", [
    "üß† Personnalit√©", "üí™ Comp√©tences", "‚ù§Ô∏è Pr√©f√©rences", "üìä R√©sum√©"
])

# Fonction g√©n√©rique pour questions persistantes
def question_radio(label, options, key):
    valeur = st.session_state.get(key)
    index = options.index(valeur) if valeur in options else 0
    choix = st.radio(label, options, index=index)
    if choix != options[0]:
        st.session_state[key] = choix

def question_selectbox(label, options, key):
    valeur = st.session_state.get(key)
    index = options.index(valeur) if valeur in options else 0
    choix = st.selectbox(label, options, index=index)
    if choix != options[0]:
        st.session_state[key] = choix

# ========== SECTION 1 ==========
if page == "üß† Personnalit√©":
    st.header("üß† Profil de personnalit√©")
    st.text_input("Pr√©nom de l'√©l√®ve :", key="prenom")

    question_radio("Pr√©f√©res-tu travailler seul(e) ou en groupe ?", ["-- S√©lectionne --", "Seul(e)", "En groupe", "Les deux"], "groupe")
    question_radio("Es-tu plut√¥t organis√©(e) ou spontan√©(e) ?", ["-- S√©lectionne --", "Organis√©(e)", "Spontan√©(e)"], "organisation")
    question_radio("Quand tu fais une erreur, tu :", ["-- S√©lectionne --", "Essaies de comprendre", "Te d√©courages", "Cherches de l‚Äôaide"], "erreur")
    question_radio("Tu pr√©f√®res :", ["-- S√©lectionne --", "Suivre les consignes", "Inventer ta m√©thode", "Un peu des deux"], "consignes")
    question_radio("Te d√©cris-tu comme quelqu‚Äôun de curieux(se) ?", ["-- S√©lectionne --", "Oui", "Non", "Parfois"], "curiosite")

# ========== SECTION 2 ==========
elif page == "üí™ Comp√©tences":
    st.header("üí™ Tes comp√©tences")
    question_radio("Es-tu plus √† l‚Äôaise √† l‚Äô√©crit ou √† l‚Äôoral ?", ["-- S√©lectionne --", "√Ä l‚Äô√©crit", "√Ä l‚Äôoral", "Les deux"], "expression")
    question_radio("Sais-tu expliquer facilement une id√©e aux autres ?", ["-- S√©lectionne --", "Oui", "Non", "Parfois"], "expliquer")
    question_radio("Es-tu √† l‚Äôaise avec les outils num√©riques ?", ["-- S√©lectionne --", "Oui", "Non", "Un peu"], "numerique")
    question_radio("Aimes-tu r√©soudre des probl√®mes complexes ?", ["-- S√©lectionne --", "Oui", "Non", "Parfois"], "probleme")

# ========== SECTION 3 ==========
elif page == "‚ù§Ô∏è Pr√©f√©rences":
    st.header("‚ù§Ô∏è Tes pr√©f√©rences")
    question_selectbox("Quelle mati√®re pr√©f√®res-tu √† l‚Äô√©cole ?", ["-- S√©lectionne --", "Maths", "Fran√ßais", "SVT", "Histoire", "Physique", "Langues", "Arts", "Sport", "Autre"], "matiere")
    question_radio("Chez toi, tu pr√©f√®res :", ["-- S√©lectionne --", "Lire", "Dessiner", "Bricoler", "Jouer", "√âcouter de la musique", "Autre"], "activite")
    question_radio("Aimes-tu les activit√©s cr√©atives ?", ["-- S√©lectionne --", "Oui", "Non", "Parfois"], "creativite")
    question_radio("Tu t‚Äôennuies vite quand une activit√© est r√©p√©titive ?", ["-- S√©lectionne --", "Oui", "Non", "Parfois"], "repetition")
    question_radio("Dans un film, tu pr√©f√®res :", ["-- S√©lectionne --", "L‚Äôhistoire", "Les images/effets", "Le message profond"], "film")

# ========== SECTION 4 ==========
elif page == "üìä R√©sum√©":
    st.header("üìä R√©sum√© de tes r√©ponses")
    prenom = st.session_state.get("prenom", "")
    if prenom:
        st.markdown(f"üë§ **√âl√®ve : {prenom}**")

    reponses = {
        k: v for k, v in st.session_state.items()
        if k not in ["page", "prenom"] and v != "-- S√©lectionne --"
    }

    for question, reponse in reponses.items():
        st.write(f"**{question}** : {reponse}")

    questions_obligatoires = [
        "groupe", "organisation", "erreur", "consignes", "curiosite",
        "expression", "expliquer", "numerique", "probleme",
        "matiere", "activite", "creativite", "repetition", "film"
    ]
    manquantes = [q for q in questions_obligatoires if st.session_state.get(q, "-- S√©lectionne --") == "-- S√©lectionne --"]

    if manquantes:
        st.warning("‚ö†Ô∏è Merci de r√©pondre √† toutes les questions avant de lancer l‚Äôanalyse.")
    else:
        if st.button("üîé Analyser mon profil"):
            with st.spinner("Analyse en cours..."):
                try:
                    prompt = f"""
Tu es un conseiller en orientation scolaire bienveillant, sp√©cialiste des coll√©giens marocains. √Ä partir des r√©ponses suivantes, propose une analyse claire et encourageante. L‚Äôobjectif est d‚Äôorienter l‚Äô√©l√®ve vers une fili√®re (scientifique, litt√©raire ou mixte) adapt√©e √† son profil.

Consigne : Utilise un langage simple et motivant. Explique tes choix avec bienveillance. Ne fais aucune hypoth√®se au-del√† des r√©ponses fournies.

Voici les informations de l‚Äô√©l√®ve :
Pr√©nom : {prenom}

R√©ponses au questionnaire :
"""
                    for q, r in reponses.items():
                        prompt += f"- {q} : {r}\n"

                    prompt += """
Analyse attendue :
1. üîç Orientation recommand√©e (scientifique, litt√©raire ou mixte) + courte justification
2. üìä √âvaluation sur 10 de :
   - Logique
   - Cr√©ativit√©
   - Communication
   - Curiosit√© scientifique
   - Expression artistique
3. üí° Un conseil personnalis√© pour mieux se conna√Ætre ou s‚Äôam√©liorer
4. ‚ú® Une id√©e de m√©tier ou domaine √† explorer (facultatif)

Sois synth√©tique, clair, et bienveillant.
"""

                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.7
                    )
                    result_text = response.choices[0].message.content
                    st.success("üéØ R√©sultat")
                    st.markdown(result_text)

                    # Extraction scores
                    scores = {}
                    for line in result_text.splitlines():
                        match = re.search(r"^(.*?)\s*:\s*.*Score\s*:\s*(\d+(?:[\.,]\d+)?)/10", line)
                        if match:
                            key = match.group(1).strip().capitalize()
                            val = match.group(2).replace(",", ".")
                            try:
                                scores[key] = float(val)
                            except:
                                pass

                    # Graphe radar
                    if scores:
                        st.markdown("### üìä Visualisation du profil")
                        labels = list(scores.keys())
                        values = list(scores.values())
                        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
                        values += values[:1]
                        angles += angles[:1]
                        fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
                        ax.plot(angles, values, color='blue', linewidth=2)
                        ax.fill(angles, values, color='skyblue', alpha=0.4)
                        ax.set_yticklabels([])
                        ax.set_xticks(angles[:-1])
                        ax.set_xticklabels(labels)
                        st.pyplot(fig)

                    # G√©n√©ration du PDF
                    pdf = FPDF()
                    pdf.add_page()
                    pdf.set_font("Arial", size=12)
                    pdf.multi_cell(0, 10, f"Orientation scolaire pour : {prenom}")
                    for q, r in reponses.items():
                        q = q.encode("latin-1", "ignore").decode("latin-1")
                        r = r.encode("latin-1", "ignore").decode("latin-1")
                        pdf.multi_cell(0, 10, f"{q} : {r}")
                    result_clean = result_text.encode("latin-1", "ignore").decode("latin-1")
                    pdf.multi_cell(0, 10, "\nR√©sultat IA :")
                    pdf.multi_cell(0, 10, result_clean)

                    buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode("latin-1")
                    buffer.write(pdf_bytes)
                    b64 = base64.b64encode(buffer.getvalue()).decode()
                    href = f'<a href="data:application/octet-stream;base64,{b64}" download="orientation_resultat.pdf">üìÑ T√©l√©charger le PDF</a>'
                    st.markdown(href, unsafe_allow_html=True)

                except Exception as e:
                    st.error("‚ùå Erreur : " + str(e))

